//
// SearchAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class SearchAPI {
    /**
     Searching the directory and newspaper pages using OpenSearch
     
     - parameter terms: (query) terms (optional)
     - parameter format: (query) format (optional)
     - parameter page: (query) format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(terms: String? = nil, format: String? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = JournalOpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Journal?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(terms: terms, format: format, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Searching the directory and newspaper pages using OpenSearch
     - GET /search/titles/results
     - parameter terms: (query) terms (optional)
     - parameter format: (query) format (optional)
     - parameter page: (query) format (optional)
     - returns: RequestBuilder<Journal> 
     */
    open class func searchWithRequestBuilder(terms: String? = nil, format: String? = nil, page: Int? = nil) -> RequestBuilder<Journal> {
        let path = "/search/titles/results"
        let URLString = JournalOpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "terms": terms?.encodeToJSON(), 
            "format": format?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Journal>.Type = JournalOpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
